// <auto-generated />
using System;
using EducationPortalASP.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EducationPortalASP.Migrations
{
    [DbContext(typeof(EducationPortalContext))]
    [Migration("20191111194647_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EducationPortalASP.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("EducationPortalASP.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bibliography")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HomeTask")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EducationPortalASP.Models.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("EducationPortalASP.Models.Administrator", b =>
                {
                    b.HasBaseType("EducationPortalASP.Models.Account");

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("EducationPortalASP.Models.Moderator", b =>
                {
                    b.HasBaseType("EducationPortalASP.Models.Account");

                    b.Property<int?>("AccountId")
                        .HasColumnName("Moderator_AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnName("Moderator_FullName")
                        .HasColumnType("text");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue("Moderator");
                });

            modelBuilder.Entity("EducationPortalASP.Models.User", b =>
                {
                    b.HasBaseType("EducationPortalASP.Models.Account");

                    b.Property<int?>("AccountId")
                        .HasColumnName("User_AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .HasColumnName("User_FullName")
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<string>("Sertificate")
                        .HasColumnType("text");

                    b.Property<string>("Skills")
                        .HasColumnType("text");

                    b.HasIndex("AccountId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("EducationPortalASP.Models.Course", b =>
                {
                    b.HasOne("EducationPortalASP.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EducationPortalASP.Models.UserCourse", b =>
                {
                    b.HasOne("EducationPortalASP.Models.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationPortalASP.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationPortalASP.Models.Administrator", b =>
                {
                    b.HasOne("EducationPortalASP.Models.Account", null)
                        .WithMany("Administrators")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("EducationPortalASP.Models.Moderator", b =>
                {
                    b.HasOne("EducationPortalASP.Models.Account", null)
                        .WithMany("Moderators")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("EducationPortalASP.Models.User", b =>
                {
                    b.HasOne("EducationPortalASP.Models.Account", null)
                        .WithMany("Users")
                        .HasForeignKey("AccountId");
                });
#pragma warning restore 612, 618
        }
    }
}
